import OpenAI from 'openai'

// Inizializza il client OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

/**
 * Trascrive un file audio utilizzando OpenAI Whisper
 * @param audioBuffer - Buffer del file audio
 * @param fileName - Nome del file audio per l'API
 * @returns Promise<string> - Il testo trascritto
 */
export async function transcribeAudio(audioBuffer: Buffer, fileName: string): Promise<string> {
  try {
    if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY === 'sk-your-openai-api-key-here') {
      throw new Error('OPENAI_API_KEY not configured or invalid')
    }

    console.log(`Starting transcription for file: ${fileName}`)
    
    // Crea un File object dal buffer
    const audioFile = new File([audioBuffer], fileName, { 
      type: 'audio/mpeg' // Tipo generico per audio
    })
    
    // Chiama l'API Whisper di OpenAI
    const transcription = await openai.audio.transcriptions.create({
      file: audioFile,
      model: 'whisper-1',
      language: 'it', // Italiano
      response_format: 'verbose_json', // Pi√π dettagli nella risposta
      temperature: 0.0, // Massima accuratezza
      prompt: "Trascrivi accuratamente tutto il parlato in italiano. Ignora rumori di fondo, musiche o watermark."
    })

    console.log('Trascrizione completata con successo')
    console.log('Dettagli trascrizione:', {
      text: transcription.text?.substring(0, 100) + '...',
      language: transcription.language,
      duration: transcription.duration
    })
    
    return transcription.text || String(transcription)

  } catch (error) {
    console.error('Errore durante la trascrizione:', error)
    
    // Gestione di errori specifici
    if (error instanceof Error) {
      if (error.message.includes('rate limit')) {
        throw new Error('OpenAI rate limit reached. Please try again in a few minutes.')
      }
      if (error.message.includes('insufficient_quota')) {
        throw new Error('OpenAI quota exceeded. Please check your OpenAI account.')
      }
      if (error.message.includes('invalid_api_key')) {
        throw new Error('Invalid OpenAI API key. Please check your configuration.')
      }
    }
    
    throw new Error(`Error during transcription: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}

/**
 * Analizza un testo trascritto utilizzando GPT per estrarre insights terapeutici
 * @param transcript - Il testo trascritto da analizzare
 * @param sessionTitle - Titolo della sessione per contesto
 * @returns Promise<string> - L'analisi del testo
 */
export async function analyzeTranscript(transcript: string, sessionTitle: string): Promise<string> {
  try {
    if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY === 'sk-your-openai-api-key-here') {
      throw new Error('OPENAI_API_KEY not configured or invalid')
    }

    console.log(`Starting analysis for session: ${sessionTitle}`)
    
    const prompt = `
Analyze the following transcript of a therapy session and provide a structured professional analysis.

Session title: ${sessionTitle}

Transcript:
${transcript}

Provide a structured analysis that includes:

1. **MAIN THEMES**: Identify recurring themes and central issues discussed
2. **EMOTIONAL STATE**: Analysis of the patient's emotional tone and mood
3. **PROGRESS**: Any signs of progress or improvement compared to previous sessions
4. **AREAS OF ATTENTION**: Topics that require further exploration
5. **RECOMMENDATIONS**: Suggestions for upcoming sessions

Use professional and clinical language, respecting confidentiality and the sensitivity of therapeutic content.
`

    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        {
          role: 'system',
          content: 'You are an assistant specialized in the analysis of therapy sessions. Provide professional, empathetic, and clinically relevant analyses.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.3,
      max_tokens: 1500,
    })

    const analysis = completion.choices[0]?.message?.content
    if (!analysis) {
      throw new Error('No analysis generated by OpenAI')
    }

    console.log('Analysis completed successfully')
    return analysis

  } catch (error) {
    console.error('Errore durante l\'analisi:', error)
    throw new Error(`Error during analysis: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}

/**
 * Diarizza una trascrizione utilizzando GPT-3.5-turbo per identificare i diversi interlocutori
 * @param transcript - Il testo trascritto da diarizzare
 * @param sessionTitle - Titolo della sessione per contesto
 * @returns Promise<string> - La trascrizione diarizzata con identificazione degli interlocutori
 */
export async function diarizeTranscript(transcript: string, sessionTitle: string): Promise<string> {
  try {
    if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY === 'sk-your-openai-api-key-here') {
      throw new Error('OPENAI_API_KEY not configured or invalid')
    }

    console.log(`Starting diarization for session: ${sessionTitle}`)
    console.log(`Original transcript length: ${transcript.length} characters`)
    
    const prompt = `
Analyze the following transcript of a therapy session and identify the different speakers.

Session title: ${sessionTitle}

Original transcript:
${transcript}

Your task is to identify how many speakers there are and who says what. Typically, in a therapy session there are:
- The therapist (who you may identify as "Therapist" or "Doctor")
- The patient (who you may identify as "Patient" or by name if mentioned)

Instructions:
1. Analyze the content to identify speaker changes
2. Identify the role of each speaker (therapist vs patient)
3. Reformat the transcript by adding clear prefixes for each speaker
4. Keep all original content, only add the prefixes
5. Use a clear format such as "Therapist:" or "Patient:" before each utterance

Example of desired output:
Therapist: Good morning, how are you feeling today?
Patient: Good, thank you. I did the homework you gave me.
Therapist: Great, tell me how it went?

Return ONLY the diarized transcript, with no additional comments.
`

    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content: 'You are an assistant specialized in diarizing therapy transcripts. Your task is to identify the different speakers and reformat the transcript by adding clear prefixes for each person speaking.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.1, // Bassa temperatura per massima consistenza
      max_tokens: 4000, // Aumentato per gestire trascrizioni lunghe
    })

    const diarizedTranscript = completion.choices[0]?.message?.content
    if (!diarizedTranscript) {
      throw new Error('No diarized transcript generated by OpenAI')
    }

    console.log('Diarization completed successfully')
    console.log(`Diarized transcript length: ${diarizedTranscript.length} characters`)
    
    return diarizedTranscript

  } catch (error) {
    console.error('Errore durante la diarizzazione:', error)
    throw new Error(`Error during diarization: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}
